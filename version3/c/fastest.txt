WHen using Montgomery reduction, some advantage comes from "fusing" the 
multiplication with the modular reduction and unrolling the loops.

For a 32-bit build and if for example using 256 bit BIGs and a base of 2^28
with the NIST256 curve, replace XXX with 256_28 and YYY with NIST256 in this 
file and in fastest_YYY.c


Then compile and execute the program fastest_YYY.c like this (using MinGW
port of GCC as an example), in the same directory as arch.h and fp_YYY.h

gcc -O2 -std=c99 fastest_YYY.c -o fastest_YYY.exe
fastest_YYY > t.txt

Now extract the code fragment from t.txt and insert it where indicated
into fp_YYY.c (look for FUSED_MODMUL)

Finally make sure that

#define FUSED_MODMUL

appears somewhere in fp_YYY.h

Finally compile and replace the fp_YYY module in the library, and maybe 
get a 30% speed-up! If there is no significant improvement, don't use this 
method!

NOTE: This method is experimental. It might impact on numerical stability.
