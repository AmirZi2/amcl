We assume than optimizing compilers will unwind loops at every opportunity. 

But sometimes they don't. So time-critical code will run faster if we step
in and unwind complex loops for the compiler.

Once the architecture (arch.h) and ECC/RSA support is decided upon choose 
which BIG numbers need to be optimized. So for example if using 256 bit 
BIGs, replace XXX with 256 in this file and in faster_XXX.c

Then compile and execute the program faster_XXX.c like this (using MinGW 
port of GCC as an example), in the same directory as arch.h and big_XXX.h

gcc -O2 -std=c99 faster_XXX.c -o faster_XXX.exe
faster_XXX > t.txt

Now extract the code fragments from t.txt and insert them where indicated
into big_XXX.c

Finally make sure that

#define UNWOUND

appears somewhere in big_XXX.h

Finally compile and replace the big_XXX module in the library, and maybe 
get a 50% speed-up! If there is no significant improvement, don't use this 
method!

